# 1 "main.pml"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 414 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "main.pml" 2

mtype {RED, GREEN}


chan NS_SENSE = [5] of {bool};
chan EW_SENSE = [5] of {bool};
chan WN_SENSE = [5] of {bool};
chan ES_SENSE = [5] of {bool};
chan NE_SENSE = [5] of {bool};
chan P_SENSE = [5] of {bool};
# 21 "main.pml"
bool NS_LOCK, EW_LOCK, WN_LOCK, ES_LOCK, NE_LOCK, P_LOCK;


chan NS_REQ = [1] of {bool};
chan EW_REQ = [1] of {bool};
chan WN_REQ = [1] of {bool};
chan ES_REQ = [1] of {bool};
chan NE_REQ = [1] of {bool};
chan P_REQ = [1] of {bool};


mtype NS_LIGHT = RED;
mtype EW_LIGHT = RED;
mtype WN_LIGHT = RED;
mtype ES_LIGHT = RED;
mtype NE_LIGHT = RED;
mtype P_LIGHT = RED;


bool fair_array[5];


bool NS_BUFFER, EW_BUFFER, WN_BUFFER, ES_BUFFER, NE_BUFFER, P_BUFFER;



inline fair_check(pointer) {
    printf("pointer = %d", pointer);
    fair_array[pointer] = true;
    bool result = true;
    int i;
    for (i : 0 .. (5 - 1)) {
        if
            :: fair_array[i] == false -> printf("elem=%d", i); result = false;
            :: else -> skip;
        fi;
    };
    printf("Result = %d", result);
    if
        :: result == true ->
            for (i : 0 .. (5 - 1)) {
                fair_array[i] = false;
            };
        :: else -> skip;
    fi;

}


proctype generatorNS() {
    printf("NS car");
    do
         :: NS_SENSE!true; printf("NS arrived");
    od;
}

proctype controllerNS() {
    printf("NS Controller triggered");
    do
        :: if
            ::len(NS_SENSE) > 0 && !fair_array[0] ->
            (!EW_LOCK && !WN_LOCK && !ES_LOCK && !P_LOCK) ->
                NS_LOCK = true;
                NS_LIGHT = GREEN;
                printf("NS light is green");
                NS_SENSE?NS_BUFFER;
                NS_LIGHT = RED;
                NS_LOCK = false;
                printf("NS light is red");
        fi
        fair_check(0);
    od
}

proctype generatorEW() {
    printf("EW car approaching");
    do
         :: EW_SENSE!true; printf("EW car arrived");
    od;
}

proctype controllerEW() {
    printf("EW controller was triggered");
    do
    :: if
        ::(len(EW_SENSE) > 0 && !fair_array[1]) ->
            (!NS_LOCK && !NE_LOCK && !WN_LOCK && !P_LOCK) ->
            EW_LOCK = true;
            EW_LIGHT = GREEN;
            printf("EW light is green");
            EW_SENSE?EW_BUFFER;
            EW_LIGHT = RED;
            EW_LOCK = false;
            printf("EW light is red");
        fi
        fair_check(1);
    od
}

proctype generatorES() {
    printf("NS car");
    do
         :: ES_SENSE!true; printf("ES car arrived");
    od;
}

proctype controllerES() {
    printf("ES controller was triggered");
    do
    :: if
        ::(len(ES_SENSE) > 0 && !fair_array[2]) ->
            (!P_LOCK && !NE_LOCK) ->
            ES_LOCK = true;
            ES_LIGHT = GREEN;
            printf("ES light is green");
            ES_SENSE?ES_BUFFER;
            ES_LIGHT = RED;
            ES_LOCK = false;
            printf("ES light is red");
        fi
        fair_check(2);
    od
}

proctype generatorWN() {
    printf("WN car");
    do
         :: WN_SENSE!true; printf("WN car arrived");
    od;
}

proctype controllerWN() {
    printf("WN controller was triggered");
    do
    :: if
        ::(len(WN_SENSE) > 0 && !fair_array[3]) ->
            (!NS_LOCK && !EW_LOCK && !NE_LOCK) ->
            WN_LOCK = true;
            WN_LIGHT = GREEN;
            printf("WN light is green");
            WN_SENSE?WN_BUFFER;
            WN_LIGHT = RED;
            WN_LOCK = false;
            printf("WN light is red");
        fi
        fair_check(3);
    od
}

proctype generatorP() {
    printf("Pedestrian");
    do
         :: P_SENSE!true; printf("Pedestrian arrived");
    od;
}

proctype controllerP() {
    printf("P controller was triggered");
    do
    :: if
        ::(len(P_SENSE) > 0 && !fair_array[4]) ->
            (!EW_LOCK && !ES_LOCK && !NE_LOCK) ->
            P_LOCK = true;
            P_LIGHT = GREEN;
            printf("P light is green");
            P_SENSE?P_BUFFER;
            P_LIGHT = RED;
            P_LOCK = false;
            printf("P light is red");
        fi
        fair_check(4);
    od
}

proctype environment() {
    run generatorNS();
    run controllerNS();
    run generatorEW();
    run controllerEW();
    run generatorES();
    run controllerES();
    run generatorWN();
    run controllerWN();
    run generatorP();
    run controllerP();
}


init {
    run environment();
}
