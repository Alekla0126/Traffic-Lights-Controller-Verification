never safetyN {    /* !([] (! (((N_LIGHT==GREEN)) && (((E_LIGHT==GREEN)) || ((W_LIGHT==GREEN)))))) */
T0_init:
	do
	:: atomic { (! ((! (((N_LIGHT==GREEN)) && (((E_LIGHT==GREEN)) || ((W_LIGHT==GREEN))))))) -> assert(!(! ((! (((N_LIGHT==GREEN)) && (((E_LIGHT==GREEN)) || ((W_LIGHT==GREEN)))))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never safetyE {    /* !([] (! (((E_LIGHT==GREEN)) && (((N_LIGHT==GREEN)) || ((P_LIGHT==GREEN)))))) */
T0_init:
	do
	:: atomic { (! ((! (((E_LIGHT==GREEN)) && (((N_LIGHT==GREEN)) || ((P_LIGHT==GREEN))))))) -> assert(!(! ((! (((E_LIGHT==GREEN)) && (((N_LIGHT==GREEN)) || ((P_LIGHT==GREEN)))))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never safetyW {    /* !([] (! (((W_LIGHT==GREEN)) && (((E_LIGHT==GREEN)) || ((N_LIGHT==GREEN)))))) */
T0_init:
	do
	:: atomic { (! ((! (((W_LIGHT==GREEN)) && (((E_LIGHT==GREEN)) || ((N_LIGHT==GREEN))))))) -> assert(!(! ((! (((W_LIGHT==GREEN)) && (((E_LIGHT==GREEN)) || ((N_LIGHT==GREEN)))))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never safetyP {    /* !([] (! (((P_LIGHT==GREEN)) && (((E_LIGHT==GREEN)) || ((W_LIGHT==GREEN)))))) */
T0_init:
	do
	:: atomic { (! ((! (((P_LIGHT==GREEN)) && (((E_LIGHT==GREEN)) || ((W_LIGHT==GREEN))))))) -> assert(!(! ((! (((P_LIGHT==GREEN)) && (((E_LIGHT==GREEN)) || ((W_LIGHT==GREEN)))))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never liveness_1 {    /* !([] ((! (((len(N_SENSE)>0)) && ((N_LIGHT==RED)))) || (<> ((N_LIGHT==GREEN))))) */
T0_init:
	do
	:: (! ((! (((len(N_SENSE)>0)) && ((N_LIGHT==RED))))) && ! (((N_LIGHT==GREEN)))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! (((N_LIGHT==GREEN)))) -> goto accept_S4
	od;
}
never liveness_2 {    /* !([] ((! (((len(E_SENSE)>0)) && ((E_LIGHT==RED)))) || (<> ((E_LIGHT==GREEN))))) */
T0_init:
	do
	:: (! ((! (((len(E_SENSE)>0)) && ((E_LIGHT==RED))))) && ! (((E_LIGHT==GREEN)))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! (((E_LIGHT==GREEN)))) -> goto accept_S4
	od;
}
never liveness_3 {    /* !([] ((! (((len(W_SENSE)>0)) && ((W_LIGHT==RED)))) || (<> ((W_LIGHT==GREEN))))) */
T0_init:
	do
	:: (! ((! (((len(W_SENSE)>0)) && ((W_LIGHT==RED))))) && ! (((W_LIGHT==GREEN)))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! (((W_LIGHT==GREEN)))) -> goto accept_S4
	od;
}
never liveness_4 {    /* !([] ((! (((len(P_SENSE)>0)) && ((P_LIGHT==RED)))) || (<> ((P_LIGHT==GREEN))))) */
T0_init:
	do
	:: (! ((! (((len(P_SENSE)>0)) && ((P_LIGHT==RED))))) && ! (((P_LIGHT==GREEN)))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! (((P_LIGHT==GREEN)))) -> goto accept_S4
	od;
}
never fairness_1 {    /* !([] (<> (! (((N_LIGHT==GREEN)) && ((N_SENSE==1)))))) */
T0_init:
	do
	:: (! ((! (((N_LIGHT==GREEN)) && ((N_SENSE==1)))))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! ((! (((N_LIGHT==GREEN)) && ((N_SENSE==1)))))) -> goto accept_S4
	od;
}
never fairness_2 {    /* !([] (<> (! (((E_LIGHT==GREEN)) && ((E_SENSE==1)))))) */
T0_init:
	do
	:: (! ((! (((E_LIGHT==GREEN)) && ((E_SENSE==1)))))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! ((! (((E_LIGHT==GREEN)) && ((E_SENSE==1)))))) -> goto accept_S4
	od;
}
never fairness_3 {    /* !([] (<> (! (((W_LIGHT==GREEN)) && ((W_SENSE==1)))))) */
T0_init:
	do
	:: (! ((! (((W_LIGHT==GREEN)) && ((W_SENSE==1)))))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! ((! (((W_LIGHT==GREEN)) && ((W_SENSE==1)))))) -> goto accept_S4
	od;
}
never fairness_4 {    /* !([] (<> (! (((P_LIGHT==GREEN)) && ((P_SENSE==1)))))) */
T0_init:
	do
	:: (! ((! (((P_LIGHT==GREEN)) && ((P_SENSE==1)))))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! ((! (((P_LIGHT==GREEN)) && ((P_SENSE==1)))))) -> goto accept_S4
	od;
}
